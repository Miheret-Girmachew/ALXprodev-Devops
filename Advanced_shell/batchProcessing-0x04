POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data_parallel"
BASE_URL="https://pokeapi.co/api/v2/pokemon"

# --- Robust Process Management ---
# Set a trap. If the script receives an EXIT, INT (Ctrl+C), or TERM signal,
# it will run the specified command.
# 'kill 0' is a special command that sends the signal to all processes
# in the current process group, effectively killing all background jobs
# started by this script. This ensures we don't leave orphaned processes.
trap "echo -e '\nCaught signal, terminating background jobs...'; kill 0" EXIT INT TERM

# --- Script Logic ---

# Create the output directory.
mkdir -p "$OUTPUT_DIR"

echo "Starting parallel fetch for all Pokémon..."

# Loop through each Pokémon and dispatch a background job.
for pokemon in "${POKEMON_LIST[@]}"; do
  (
    output_file="${OUTPUT_DIR}/${pokemon}.json"
    echo "Dispatching fetch for ${pokemon}..."
    
    if curl -sf -o "$output_file" "${BASE_URL}/${pokemon}"; then
      echo "Success: Data for ${pokemon} saved. ✅"
    else
      echo "Error: Failed to fetch data for ${pokemon}. ❌"
      rm -f "$output_file"
    fi
  ) &
done

# --- Wait for all jobs ---
# The 'wait' command pauses the script until all child processes complete.
# The 'trap' command above will handle interruptions during this wait.
echo "All fetch jobs dispatched. Waiting for completion..."
wait

# --- Cleanup Trap ---
# After 'wait' completes successfully, we no longer need the trap.
# Disabling it prevents the 'kill 0' command from running on a normal,
# successful exit.
trap - EXIT INT TERM

echo "-----------------------------------------------------"
echo "All parallel data fetching tasks are complete."
echo "Check the '${OUTPUT_DIR}' directory for results."

