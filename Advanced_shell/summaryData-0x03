INPUT_DIR="pokemon_data"
OUTPUT_CSV="pokemon_report.csv"

# --- Dependency & Pre-execution Checks ---
if ! command -v jq &> /dev/null; then
    echo "Error: 'jq' is not installed. Please install it to proceed."
    exit 1
fi

if [ ! -d "$INPUT_DIR" ]; then
    echo "Error: Directory '$INPUT_DIR' not found."
    echo "Please run the 'batchProcessing-0x02' script first."
    exit 1
fi

# --- Main Logic ---

# 1. Create the CSV file and write the header.
#    Using '>' overwrites any previous report file.
echo "Name,Height (m),Weight (kg)" > "$OUTPUT_CSV"

# 2. Loop through each JSON file in the input directory.
for json_file in "$INPUT_DIR"/*.json; do
    # This check ensures the loop doesn't run on a non-existent file if the dir is empty.
    [ -e "$json_file" ] || continue

    # Extract raw data using jq.
    # The '|| continue' part makes the script robust against malformed JSON files.
    name_raw=$(jq -r '.name' "$json_file") || continue
    height_raw=$(jq '.height' "$json_file") # In decimetres
    weight_raw=$(jq '.weight' "$json_file") # In hectograms

    # Capitalize the first letter of the name.
    name=$(echo "$name_raw" | sed 's/./\u&/')

    # Use awk for simple conversion.
    # Height: decimetres -> meters (divide by 10)
    # Weight: hectograms -> kilograms (divide by 10)
    height_m=$(echo "$height_raw" | awk '{printf "%.1f", $1 / 10.0}')
    weight_kg=$(echo "$weight_raw" | awk '{printf "%.1f", $1 / 10.0}')

    # Append the formatted data as a new row to the CSV.
    # Using '>>' appends to the file.
    echo "$name,$height_m,$weight_kg" >> "$OUTPUT_CSV"
done

# 3. Announce the report generation.
echo "CSV Report generated at: $OUTPUT_CSV"
echo "" # Add a blank line for formatting

# 4. Print the CSV content to the console.
cat "$OUTPUT_CSV"
echo "" # Add another blank line

# 5. Use a single, powerful awk command to calculate and print averages.
#    - BEGIN {FS=","}: Sets the field separator to a comma.
#    - NR > 1: Skips the header row (NR is the Number of Records/Rows).
#    - {h_sum+=$2; w_sum+=$3; count++}: For each data row, adds height and weight
#      to sums and increments a counter.
#    - END { ... }: After processing all lines, calculates and prints the averages.
#      '%.2f' formats the numbers to two decimal places.
awk 'BEGIN {FS=","} NR > 1 {h_sum+=$2; w_sum+=$3; count++} END {if (count>0) {printf "Average Height: %.2f m\n", h_sum/count; printf "Average Weight: %.2f kg\n", w_sum/count}}' "$OUTPUT_CSV"

