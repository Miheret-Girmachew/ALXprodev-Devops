#!/bin/bash

# Objective: Extract and format data from a JSON file using jq, awk, and sed.
# This script reads the data.json file created by the previous task,
# extracts the Pokémon's name, type, height, and weight, and then
# formats this information into a human-readable sentence.

# --- Variables ---
INPUT_FILE="data.json"

# --- Pre-execution Check ---
# Ensure the input JSON file exists and is not empty.
# -s flag checks if the file exists AND has a size greater than zero.
if [ ! -s "$INPUT_FILE" ]; then
  echo "Error: '$INPUT_FILE' not found or is empty."
  echo "Please run the 'apiAutomation-0x00' script first to generate it."
  exit 1
fi

# --- Data Extraction and Processing ---

# 1. Use 'jq' to extract the raw data from the JSON file.
#    -r flag removes the quotes from string outputs.
NAME_RAW=$(jq -r '.name' "$INPUT_FILE")
HEIGHT_RAW=$(jq '.height' "$INPUT_FILE") # In decimetres
WEIGHT_RAW=$(jq '.weight' "$INPUT_FILE") # In hectograms
#    The '.types' field is an array; we get the first type's name.
TYPE_RAW=$(jq -r '.types[0].type.name' "$INPUT_FILE")

# 2. Use 'sed' to process text.
#    Here, we capitalize the first letter of the Pokémon's name.
#    's/./\u&/' substitutes the first character ('.') with its uppercase version ('\u&').
NAME=$(echo "$NAME_RAW" | sed 's/./\u&/')

# 3. Use 'awk' for data manipulation and calculations.
#    - Convert height from decimetres to meters (divide by 10).
#    - Convert weight from hectograms to kilograms (divide by 10).
#    'printf' is used for better number formatting.
HEIGHT=$(echo "$HEIGHT_RAW" | awk '{printf "%.1f", $1 / 10}')
WEIGHT=$(echo "$WEIGHT_RAW" | awk '{printf "%.0f", $1 / 10}')

# The type does not require additional processing for this example.
TYPE="$TYPE_RAW"

# --- Final Output ---
# Construct the final sentence in the required format.
echo "$NAME is of type $TYPE, weighs ${WEIGHT}kg, and is ${HEIGHT}m tall."
