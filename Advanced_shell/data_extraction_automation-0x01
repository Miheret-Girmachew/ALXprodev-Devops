# You can use cat <<'EOF' > ... as before, or open the file in an editor.
cat <<'EOF' > Advanced_shell/data_extraction_automation-0x01
#!/bin/bash

# Objective: Extract and format data from a JSON file using jq, awk, and sed.
# This script reads the data.json file, extracts PokÃ©mon stats,
# and formats them into a human-readable sentence.

# --- Dependency Check ---
# A robust script should verify its dependencies are installed.
# The 'command -v' command checks if a command exists.
if ! command -v jq &> /dev/null; then
    echo "Error: 'jq' is not installed."
    echo "Please install it to proceed (e.g., 'sudo apt-get install jq' or 'pacman -S mingw-w64-x86_64-jq')."
    exit 1
fi

# --- Variables ---
INPUT_FILE="data.json"

# --- Pre-execution Check ---
if [ ! -s "$INPUT_FILE" ]; then
  echo "Error: '$INPUT_FILE' not found or is empty."
  echo "Please run the 'apiAutomation-0x00' script first to generate it."
  exit 1
fi

# --- Data Extraction and Processing ---

# 1. Use 'jq' to extract the raw data.
NAME_RAW=$(jq -r '.name' "$INPUT_FILE")
HEIGHT_RAW=$(jq '.height' "$INPUT_FILE") # In decimetres
WEIGHT_RAW=$(jq '.weight' "$INPUT_FILE") # In hectograms
TYPE_RAW=$(jq -r '.types[0].type.name' "$INPUT_FILE")

# 2. Use 'sed' to capitalize the first letter of the name and type.
NAME=$(echo "$NAME_RAW" | sed 's/./\u&/')
TYPE=$(echo "$TYPE_RAW" | sed 's/./\u&/')

# 3. Use 'awk' for unit conversions.
HEIGHT=$(echo "$HEIGHT_RAW" | awk '{printf "%.1f", $1 / 10}') # Decimetres to Meters
WEIGHT=$(echo "$WEIGHT_RAW" | awk '{printf "%.0f", $1 / 10}') # Hectograms to Kilograms

# --- Final Output ---
echo "$NAME is of type $TYPE, weighs ${WEIGHT}kg, and is ${HEIGHT}m tall."
EOF