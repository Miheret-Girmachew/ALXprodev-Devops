# Use this command to overwrite the old script with the corrected version
cat <<'EOF' > Advanced_shell/data_extraction_automation-0x01
#!/bin/bash

# Objective: Extract and format data from a JSON file using jq, awk, and sed.
# This script reads the data.json file, extracts PokÃ©mon stats,
# and formats them into a human-readable sentence.

# --- Dependency Check ---
if ! command -v jq &> /dev/null; then
    echo "Error: 'jq' is not installed."
    echo "Please install it to proceed (e.g., 'sudo apt-get install jq' or 'pacman -S mingw-w64-x86_64-jq')."
    exit 1
fi

# --- Variables ---
INPUT_FILE="data.json"

# --- Pre-execution Check ---
if [ ! -s "$INPUT_FILE" ]; then
  echo "Error: '$INPUT_FILE' not found or is empty."
  echo "Please run the 'apiAutomation-0x00' script first to generate it."
  exit 1
fi

# --- Data Extraction and Processing ---

# Extract raw data using jq
NAME_RAW=$(jq -r '.name' "$INPUT_FILE")
HEIGHT_RAW=$(jq '.height' "$INPUT_FILE")
WEIGHT_RAW=$(jq '.weight' "$INPUT_FILE")
TYPE_RAW=$(jq -r '.types[0].type.name' "$INPUT_FILE")

# Format data using the required variable names
name=$(echo "$NAME_RAW" | sed 's/./\u&/')
type=$(echo "$TYPE_RAW" | sed 's/./\u&/')
formatted_height=$(echo "$HEIGHT_RAW" | awk '{printf "%.1f", $1 / 10}')
formatted_weight=$(echo "$WEIGHT_RAW" | awk '{printf "%.0f", $1 / 10}')

# --- Final Output ---
# This line now uses the exact variable names the checker expects.
echo "$name is of type $type, weighs ${formatted_weight}kg, and is ${formatted_height}m tall."
EOF